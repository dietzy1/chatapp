// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: chatroom.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addUserToChatroom = `-- name: AddUserToChatroom :exec
INSERT INTO
    chatroom_users (chatroom_id, user_id)
VALUES
    ($1, $2)
`

type AddUserToChatroomParams struct {
	ChatroomID uuid.UUID
	UserID     uuid.UUID
}

func (q *Queries) AddUserToChatroom(ctx context.Context, arg AddUserToChatroomParams) error {
	_, err := q.db.Exec(ctx, addUserToChatroom, arg.ChatroomID, arg.UserID)
	return err
}

const getChannels = `-- name: GetChannels :many
SELECT
    ch.channel_id,
    ch.channel_name,
    ch.chatroom_id
FROM
    channels ch
    JOIN chatrooms c ON ch.chatroom_id = c.chatroom_id
    JOIN chatroom_users cu ON c.chatroom_id = cu.chatroom_id
WHERE
    cu.user_id = $1
`

func (q *Queries) GetChannels(ctx context.Context, userID uuid.UUID) ([]Channel, error) {
	rows, err := q.db.Query(ctx, getChannels, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(&i.ChannelID, &i.ChannelName, &i.ChatroomID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatrooms = `-- name: GetChatrooms :many
SELECT
    c.chatroom_id,
    c.chatroom_name,
    c.owner_id,
    CAST(c.icon_id AS UUID) as icon_id,
    CAST(i.kind AS VARCHAR(255)) AS icon_kind,
    CAST(i.link AS VARCHAR(255)) AS icon_link
FROM
    chatrooms c
    JOIN chatroom_users cu ON c.chatroom_id = cu.chatroom_id
    LEFT JOIN icons i ON c.icon_id = i.icon_id
WHERE
    cu.user_id = $1
`

type GetChatroomsRow struct {
	ChatroomID   uuid.UUID
	ChatroomName string
	OwnerID      uuid.UUID
	IconID       uuid.UUID
	IconKind     string
	IconLink     string
}

func (q *Queries) GetChatrooms(ctx context.Context, userID uuid.UUID) ([]GetChatroomsRow, error) {
	rows, err := q.db.Query(ctx, getChatrooms, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChatroomsRow
	for rows.Next() {
		var i GetChatroomsRow
		if err := rows.Scan(
			&i.ChatroomID,
			&i.ChatroomName,
			&i.OwnerID,
			&i.IconID,
			&i.IconKind,
			&i.IconLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersInChatroom = `-- name: GetUsersInChatroom :many
SELECT
    u.user_id,
    u.username,
    u.icon_id,
    i.link AS icon_link,
    i.kind AS icon_kind,
    u.user_description,
    u.join_date,
    u.verified
FROM
    users u
    LEFT JOIN icons i ON u.icon_id = i.icon_id
    INNER JOIN chatroom_users cu ON u.user_id = cu.user_id
WHERE
    cu.chatroom_id = $1
`

type GetUsersInChatroomRow struct {
	UserID          uuid.UUID
	Username        string
	IconID          uuid.UUID
	IconLink        pgtype.Text
	IconKind        pgtype.Text
	UserDescription string
	JoinDate        pgtype.Date
	Verified        bool
}

func (q *Queries) GetUsersInChatroom(ctx context.Context, chatroomID uuid.UUID) ([]GetUsersInChatroomRow, error) {
	rows, err := q.db.Query(ctx, getUsersInChatroom, chatroomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersInChatroomRow
	for rows.Next() {
		var i GetUsersInChatroomRow
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.IconID,
			&i.IconLink,
			&i.IconKind,
			&i.UserDescription,
			&i.JoinDate,
			&i.Verified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
