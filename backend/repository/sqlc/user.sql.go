// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package generated

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (username, icon_src)
VALUES
    ($1, $2)
RETURNING
    user_id
`

type CreateUserParams struct {
	Username string
	IconSrc  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.IconSrc)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const getUser = `-- name: GetUser :one
SELECT
    user_id,
    username,
    icon_src,
    user_description,
    join_date,
    verified
FROM
    users
WHERE
    user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.IconSrc,
		&i.UserDescription,
		&i.JoinDate,
		&i.Verified,
	)
	return i, err
}

const updateUserVerificationAndSetPassword = `-- name: UpdateUserVerificationAndSetPassword :exec
BEGIN
`

func (q *Queries) UpdateUserVerificationAndSetPassword(ctx context.Context) error {
	_, err := q.db.Exec(ctx, updateUserVerificationAndSetPassword)
	return err
}
