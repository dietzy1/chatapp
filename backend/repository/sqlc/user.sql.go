// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (username, user_description, icon_id)
VALUES
    ($1, $2, $3)
RETURNING
    user_id
`

type CreateUserParams struct {
	Username        string
	UserDescription string
	IconID          uuid.UUID
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.UserDescription, arg.IconID)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const getUserAndIcon = `-- name: GetUserAndIcon :one
SELECT
    u.user_id,
    u.username,
    CAST(i.icon_id AS UUID) AS icon_id,
    i.link,
    i.kind,
    i.is_default,
    u.user_description,
    u.join_date,
    u.verified
FROM
    users u
    LEFT JOIN icons i ON u.icon_id = i.icon_id
WHERE
    u.user_id = $1
`

type GetUserAndIconRow struct {
	UserID          uuid.UUID
	Username        string
	IconID          uuid.UUID
	Link            pgtype.Text
	Kind            pgtype.Text
	IsDefault       pgtype.Bool
	UserDescription string
	JoinDate        pgtype.Date
	Verified        bool
}

func (q *Queries) GetUserAndIcon(ctx context.Context, userID uuid.UUID) (GetUserAndIconRow, error) {
	row := q.db.QueryRow(ctx, getUserAndIcon, userID)
	var i GetUserAndIconRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.IconID,
		&i.Link,
		&i.Kind,
		&i.IsDefault,
		&i.UserDescription,
		&i.JoinDate,
		&i.Verified,
	)
	return i, err
}
